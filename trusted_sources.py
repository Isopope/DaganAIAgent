# üåê Sources Officielles Togolaises Fiables

# Sites gouvernementaux officiels
SERVICE_PUBLIC = "service-public.gouv.tg"
GOUVERNEMENT = "gouvernement.tg"
PRESIDENCE = "presidence.gouv.tg"

# Minist√®res
MINISTERE_JUSTICE = "justice.gouv.tg"
MINISTERE_INTERIEUR = "interieur.gouv.tg"
MINISTERE_AFFAIRES_ETRANGERES = "diplomatie.gouv.tg"

# Services administratifs
PREFECTURE_LOME = "prefecture-lome.gouv.tg"
MAIRIE_LOME = "mairie-lome.tg"

# Liste compl√®te des domaines fiables (ordre de priorit√©)
TRUSTED_DOMAINS = [
    "service-public.gouv.tg",           # Service public officiel (PRIORIT√â 1)
    "gouvernement.tg",                  # Site du gouvernement
    "presidence.gouv.tg",              # Pr√©sidence de la R√©publique
    "justice.gouv.tg",                 # Minist√®re de la Justice
    "interieur.gouv.tg",               # Minist√®re de l'Int√©rieur
    "diplomatie.gouv.tg",              # Minist√®re des Affaires √©trang√®res
    "prefecture-lome.gouv.tg",         # Pr√©fecture de Lom√©
    "mairie-lome.tg",                  # Mairie de Lom√©
    "agence-nationale-identification.tg", # ANI (identification biom√©trique)
    "anpe.tg",                         # Agence Nationale Pour l'Emploi
    "cnss.tg",                         # Caisse Nationale de S√©curit√© Sociale
]

# Requ√™tes de recherche web optimis√©es par domaine
def get_search_query(user_question: str, priority_domain: str = None) -> str:
    """
    G√©n√®re une requ√™te de recherche web optimis√©e
    
    Args:
        user_question: Question de l'utilisateur
        priority_domain: Domaine √† prioriser (optionnel)
    
    Returns:
        Requ√™te optimis√©e avec restriction de site
    """
    if priority_domain:
        return f"{user_question} site:{priority_domain}"
    
    # Par d√©faut, chercher sur service-public.gouv.tg
    return f"{user_question} site:service-public.gouv.tg"


def get_multi_domain_queries(user_question: str, max_domains: int = 3) -> list[str]:
    """
    G√©n√®re plusieurs requ√™tes pour rechercher sur plusieurs domaines fiables
    
    Args:
        user_question: Question de l'utilisateur
        max_domains: Nombre maximum de domaines √† interroger
    
    Returns:
        Liste de requ√™tes optimis√©es
    """
    queries = []
    for domain in TRUSTED_DOMAINS[:max_domains]:
        queries.append(f"{user_question} site:{domain}")
    return queries


# Configuration pour Tavily
TAVILY_CONFIG = {
    "search_depth": "advanced",  # Recherche approfondie
    "max_results": 5,            # Maximum 5 r√©sultats par requ√™te
    "include_domains": TRUSTED_DOMAINS,  # Limiter aux domaines fiables
    "exclude_domains": [
        "facebook.com",
        "twitter.com",
        "instagram.com",
        "youtube.com",
        # Exclure les r√©seaux sociaux et sites non officiels
    ]
}


# Messages d'erreur si aucune source fiable n'est trouv√©e
NO_RELIABLE_SOURCE_MESSAGE = """
Je n'ai pas trouv√© d'informations fiables dans les sources officielles togolaises.

**Sources consult√©es :**
- ‚úÖ Base de connaissances (documents officiels)
- ‚úÖ service-public.gouv.tg
- ‚úÖ gouvernement.tg
- ‚úÖ Autres sites gouvernementaux

**Recommandations :**
1. V√©rifie directement sur https://service-public.gouv.tg
2. Contacte le service administratif concern√©
3. Rends-toi physiquement √† la mairie ou pr√©fecture

Veux-tu que je reformule ta question pour √©largir la recherche ? ü§î
"""


# Validation des sources
def is_trusted_source(url: str) -> bool:
    """
    V√©rifie si une URL provient d'une source fiable
    
    Args:
        url: URL √† v√©rifier
    
    Returns:
        True si la source est fiable, False sinon
    """
    if not url:
        return False
    
    url_lower = url.lower()
    return any(domain in url_lower for domain in TRUSTED_DOMAINS)


def get_source_reliability_score(url: str) -> float:
    """
    Calcule un score de fiabilit√© pour une source
    
    Args:
        url: URL de la source
    
    Returns:
        Score entre 0.0 (non fiable) et 1.0 (tr√®s fiable)
    """
    if not url:
        return 0.0
    
    url_lower = url.lower()
    
    # Score par domaine (ordre de priorit√©)
    for i, domain in enumerate(TRUSTED_DOMAINS):
        if domain in url_lower:
            # Score d√©croissant selon la position dans la liste
            return 1.0 - (i * 0.05)
    
    # Source inconnue = score faible
    return 0.3
