"""
ü§ñ HYBRID RAG Graph Implementation
Architecture: START ‚Üí ROUTE_QUESTION ‚Üí [CASUAL_CONVO | AGENT_RAG] ‚Üí END

‚ö†Ô∏è NOTE IMPORTANTE : Ce syst√®me est un **Hybrid RAG** qui g√®re √† la fois :
- Conversations informelles (casual) : r√©ponses amicales, conversation g√©n√©rale
- Questions administratives : recherche RAG sp√©cialis√©e Togo

DIFF√âRENCES vs syst√®me pr√©c√©dent :
- ‚ùå Plus de rejet des questions hors-sujet
- ‚úÖ Gestion intelligente des conversations casual
- ‚úÖ Routing automatique entre casual et admin
- ‚úÖ Agent ReAct pour les questions administratives

Le routeur utilise LLM pour classifier :
- CASUAL : salutations, m√©t√©o, conversation g√©n√©rale, questions personnelles
- ADMIN : proc√©dures administratives, documents, services publics togolais

L'agent ReAct utilise deux tools :
- vector_search_tool : Recherche vectorielle avec cosine similarity (threshold=0.65) + reranking LLM
- web_search_tool : Recherche web Tavily avec focus Togo + reranking LLM
"""
import os
import logging
from typing import List, Literal
from typing_extensions import TypedDict

from langchain.schema import Document
from langchain_core.messages import BaseMessage, HumanMessage, AIMessage
from langgraph.graph import StateGraph, START, END, MessagesState
from langgraph.checkpoint.memory import InMemorySaver

# Import du nouveau node routeur
from nodes.route_question import route_question

# Import du node casual conversation
from nodes.casual_convo import casual_convo

# Import du nouveau node agent
from nodes.agent_rag import agent_rag

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# --- GraphState Definition ---
class GraphState(MessagesState):
    """
    √âtat du graph Hybrid RAG - h√©rite de MessagesState pour la gestion automatique de l'historique

    Attributes:
        messages: Historique des messages (g√©r√© automatiquement par MessagesState)
        question_type: Type de question d√©tect√© ("casual" ou "admin")
    """
    question_type: str


# --- Build Hybrid RAG Graph ---
def build_agent_graph(checkpointer=None):
    """
    Construit et compile le workflow Hybrid RAG avec architecture intelligente :
    START ‚Üí ROUTE_QUESTION ‚Üí [CASUAL_CONVO | AGENT_RAG] ‚Üí END

    Le routeur d√©cide automatiquement si c'est une conversation casual ou une question administrative.

    Args:
        checkpointer: Checkpointer InMemory pour la m√©moire conversationnelle

    Returns:
        Compiled StateGraph pr√™t √† √™tre invoqu√©
    """
    print("\n=== Construction du Hybrid RAG Graph ===")

    # Initialiser le graph avec GraphState (h√©rite de MessagesState)
    workflow = StateGraph(GraphState)

    # Ajouter les nodes (architecture hybride)
    workflow.add_node("route_question", route_question)
    workflow.add_node("casual_convo", casual_convo)
    workflow.add_node("agent_rag", agent_rag)

    print("‚úì Nodes ajout√©s: route_question, casual_convo, agent_rag")

    # Fonction pour router apr√®s classification
    def route_after_question_type(state: GraphState) -> Literal["casual_convo", "agent_rag"]:
        """
        Route vers casual_convo pour conversations informelles,
        vers agent_rag pour questions administratives.
        """
        question_type = state.get("question_type", "admin")
        if question_type == "casual":
            return "casual_convo"
        else:
            return "agent_rag"

    # D√©finir les edges (architecture en Y)
    # START ‚Üí route_question
    workflow.add_edge(START, "route_question")

    # route_question ‚Üí [casual_convo OU agent_rag]
    workflow.add_conditional_edges(
        "route_question",
        route_after_question_type,
        {
            "casual_convo": "casual_convo",
            "agent_rag": "agent_rag"
        }
    )

    # casual_convo ‚Üí END
    workflow.add_edge("casual_convo", END)

    # agent_rag ‚Üí END
    workflow.add_edge("agent_rag", END)

    print("‚úì Edges configur√©s : START ‚Üí route_question ‚Üí [casual_convo | agent_rag] ‚Üí END")

    # Compiler le graph avec ou sans checkpointer
    if checkpointer:
        app = workflow.compile(checkpointer=checkpointer)
        print("‚úì Graph compil√© avec InMemorySaver checkpointer unifi√©")
    else:
        app = workflow.compile()
        print("‚úì Graph compil√© sans checkpointer (pas de m√©moire)")

    print("=== Hybrid RAG Graph pr√™t ===\n")

    return app


# --- Graph instance globale avec InMemorySaver unifi√© ---
_agent_graph = None
_unified_checkpointer = None

def get_crag_graph():
    """
    R√©cup√®re l'instance du graph Hybrid RAG avec InMemorySaver unifi√© (singleton pattern).

    ‚ö†Ô∏è LEGACY NAME : Le nom "get_crag_graph" est conserv√© pour compatibilit√©,
    mais ce syst√®me est en r√©alit√© un **Hybrid RAG** qui g√®re conversations casual + admin.

    Architecture actuelle : Routeur intelligent ‚Üí [Casual | Agent RAG]
    - Conversations informelles : r√©ponses amicales et conversationnelles
    - Questions administratives : recherche RAG sp√©cialis√©e Togo

    Returns:
        Compiled Hybrid RAG graph avec checkpointer InMemory unifi√©
    """
    global _agent_graph, _unified_checkpointer

    if _agent_graph is None:
        # Cr√©er un checkpointer InMemory UNIFI√â pour tout le syst√®me
        # (graph + agent interne partagent le m√™me checkpointer)
        _unified_checkpointer = InMemorySaver()
        _agent_graph = build_agent_graph(checkpointer=_unified_checkpointer)
        print("‚úì Checkpointer InMemory unifi√© cr√©√© (partag√© graph + agent)")

    return _agent_graph

